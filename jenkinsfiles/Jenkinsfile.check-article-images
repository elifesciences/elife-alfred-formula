import RemoteTestArtifact

// 48hrs
def timeoutOverride = 2880

def stackname = "iiif--devchk2"
def datestamp = new Date().format("yyyy-MM-dd", TimeZone.getTimeZone('UTC'))
def artefact = "report-${datestamp}.tar.gz"

elifePipeline({

    lock(stackname) {
    
        try {
            stage "start instance", {
                builderStart stackname
                sh "${env.BUILDER_PATH}bldr 'update:${stackname}'"
            }

            stage "update image list", {
                builderCmd(stackname, "./list-all-figures.sh", "/opt/iiif-deviation-checker", concurrency="serial")
            }

            stage "smoke tests", {
                builderCmd(stackname, "./devchk --help", "/opt/iiif-deviation-checker", concurrency="serial")
            }

            stage "check images", {
                builderCmd(stackname, "rm -rf report report.json report.tar.gz", "/opt/iiif-deviation-checker", concurrency="serial")
                builderCmd(stackname, "./devchk --article-image-list all-figures.log", "/opt/iiif-deviation-checker", concurrency="serial")
            }

            stage "check images (second pass)", {
                builderCmd(stackname, "./devchk --article-image-list all-figures.log --just-unsuccessful --prev-results-dir report", "/opt/iiif-deviation-checker", concurrency="serial")
            }

            stage "report", {
                builderCmd(
                    stackname, 
                    "./devchk --collate --iiif-loc https://iiif.elifesciences.org --prev-results-dir report > report.json 2> >(tee report-summary.txt >&2)", 
                    "/opt/iiif-deviation-checker", 
                    concurrency="serial")
            }

            stage "archive artefacts", {
                try {
                    builderCmd(stackname, "tar czf ${artefact} all-figures.log report-summary.txt report.json report/", "/opt/iiif-deviation-checker", concurrency="serial")
                    sh "${env.BUILDER_PATH}bldr download_file:${stackname},/opt/iiif-deviation-checker/${artefact},${env.WORKSPACE}/${artefact},allow_missing=True"
                    sh "${env.BUILDER_PATH}bldr download_file:${stackname},/opt/iiif-deviation-checker/report-summary.txt,${env.WORKSPACE}/report-summary.txt,allow_missing=True"
                    archiveArtifacts artifacts: "${artefact}, report-summary.txt", onlyIfSuccessful: true
                    
                } catch (Exception e) {
                    echo 'Exception stacktrace: ' + e.getStackTrace()
                    echo 'Exception occurred: ' + e.toString()
                }
            }
        }
        finally {
            builderStop stackname
        }
    }
}, timeoutOverride)
