elifePipeline {
    node('containers-jenkins-plugin') {
        def commit
        def revision = params.revision ? params.revision : 'catchall'
        def tag = params.revision ? params.revision : 'latest'

        stage "Checkout", {
            sh(
                "rm -rf grobid"
                + " && git clone -b catchall git@github.com:elifesciences/grobid.git"
                + " && cd grobid"
                + " && git checkout ${revision}"
            )
            commit = sh(returnStdout: true, script: "cd grobid && git rev-parse HEAD").trim()
            echo "commit: ${commit}"
        }

        stage "Build Image", {
            dir('grobid') {
                def dockerfile = "Dockerfile"
                if (fileExists("Dockerfile.crf")) {
                    // GROBID 0.6.2+ contains Dockerfile.crf and Dockerfile.delft
                    dockerfile = "Dockerfile.crf"
                }
                // we are using a blank version as the commit hash wouldn't be a valid version
                sh "docker build \
                    -f ${dockerfile} \
                    -t elifesciences/grobid:${commit} \
                    --build-arg GROBID_VERSION= ."
            }
        }

        stage 'Push unstable image', {
            def image = DockerImage.elifesciences(this, 'grobid', commit)
            def unstable_image = image.addSuffixAndTag('_unstable', commit)
            unstable_image.tag(tag).push()
            unstable_image.push()
        }

        stage 'Trigger grobid tag update', {
            if (revision == 'catchall') {
                build job:  '../dependencies/dependencies-sciencebeam-trainer-update-grobid',
                            wait: false,
                            parameters: [string(name: 'grobid_tag', value: commit)]
            }
        }
    }
}
