// all stopping commands use timeouts as there may be a lock on them representing a build running,
// which would lead to this build being unable to progress
// they also act on nodes in the same environment in parallel (all `ciStacks` for example)
elifePipeline {
    def ciStacks = elifeCiStacks()
    def end2endStacks = elifeEnd2endStacks()
    def restOfStacks = elifeSlaveStacks() + elifeAnonymousStacks()

    try {
        timeout(time:120, unit:'SECONDS') {
            stage 'Ci', {
                builderStopAll(ciStacks)
            }
        }
    } catch (org.jenkinsci.plugins.workflow.steps.FlowInterruptedException e) {
        echo "Spent enough time on --ci stacks"
        echo e.toString()
    }

    try {
        timeout(time:120, unit:'SECONDS') {
            stage 'End2end', {
                lock ('end2end') {
                    builderStopAll(end2endStacks)
                }
            }
        }
    } catch (org.jenkinsci.plugins.workflow.steps.FlowInterruptedException e) {
        echo "Spent enough time on --end2end stacks"
        echo e.toString()
    }

    try {
        timeout(time:120, unit:'SECONDS') {
            stage 'Rest of stacks', {
                builderStopAll(restOfStacks)
            }
        }
    } catch (org.jenkinsci.plugins.workflow.steps.FlowInterruptedException e) {
        echo "Spent enough time on rest of stacks"
        echo e.toString()
    }
}
