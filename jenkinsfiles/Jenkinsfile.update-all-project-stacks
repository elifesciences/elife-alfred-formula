elifePipeline({
    // there has to be a list of these things out there, right?
    project_envlist = [
        ["annotations", "continuumtest,prod"],
        ["api-gateway", "continuumtest,prod"],
        ["bastion", "prod"],
        ["bioprotocol", "continuumtest,ci,prod"],
        ["digests", "continuumtest,prod"],
        ["elife-bot", "continuumtest,ci,prod"],
        ["elife-dashboard", "continuumtest,ci,prod"],
        ["elife-metrics", "continuumtest,ci,prod"],
        ["iiif", "continuumtest,ci,prod"],
        ["journal-cms", "continuumtest,ci,prod"],
        ["journal", "continuumtestpreview,preview,continuumtest,prod"],
        ["lax", "continuumtest,ci,prod"],
        ["observer", "ci,prod"],
        ["profiles", "continuumtest,prod"],
        ["redirects", "ci,prod"],

        // no reason for library instances to be run sequentially
        ["elife-libraries", "powerful3", "elife-libraries--powerful3"],
        ["elife-libraries", "ci", "elife-libraries--ci"],
    ]
    actions = [:]
    for (int i = 0; i < project_envlist.size(); i++) {
        final project = project_envlist[i][0]
        final envlist = project_envlist[i][1]
        final label
        if (project_envlist[i].size() == 3) {
            label = project_envlist[i][2]
        }
        else {
            label = project
        }
        actions[label] = {
            elifeUpdateProjectByEnv(project.toString(), envlist.toString())
        }
    }

    // run the actions in parallel, but continue on any failures.
    // the build will still be marked as failed.
    catchError {
        parallel actions
    }

    // these can't be run as part of the above.
    // their order is debateable, but they should *not* be run in parallel.
    special_cases = [
        // would ordinarily shutdown the machine orchestrating the update!
        // the `elifeUpdateProjectByEnv` pipeline has special handling for `elife-alfred--prod`,
        // executing the update from the `elife-libraries--ci` instance.
        ["elife-alfred", "prod"],

        // is needed by minions to receive their highstate configuration
        ["master-server", "prod"],

        // infrastructure monitor. probably best to do this one last.
        ["monitor", "prod"],
    ]
    for (int i = 0; i < special_cases.size(); i++) {
        final project = special_cases[i][0]
        final envlist = special_cases[i][1]
        elifeUpdateProjectByEnv(project.toString(), envlist.toString())
    }
})
